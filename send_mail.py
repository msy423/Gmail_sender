# -*- coding: utf-8 -*-
"""メール送るやつ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t7vFerSbbLTUtSbJ35h-U1WWiyUuQL4I

***完成！***

[参考サイト](https://zenn.dev/eito_blog/articles/8c97f0bcbc3260)
- *2段階認証を有効にしてアプリパスワードを発行する必要がある

**使い方**
1. 送り主のgmailアドレスとそのアカウントのアプリパスワードを調べる。
2. スプレッドシートに送る必要のない人が含まれている場合はその人たちを削除し、スプレッドシートを.xlsx（excelファイル）でドライブ内に保存する。
3.下のセルのf=''に先ほど保存した.xlsxファイルのパスを書く。
4.送り主のメールアドレス、アプリパスワード、件名、本文を記入し、順番にセルを実行する。セルはカーソルをわせると再生マークが表示され、それを押すと実行できる。
"""

#ここの''のなかを自分が使いたい.xlsxファイルのパスに置き換える
f = #write path

#送り主のgmailアドレス
gmail = #write your email adress!
#送り主のgoogleアカウントのアプリパスワード
password = #write your app pass


#件名
subject = 'テストメール'
#本文
mailText = "これはテストメールです。\n{name}さんのメールアドレスは{email}です。\n一斉送信のテストで送信しました。\n\n村本"
'''
\n 改行の記号
{} 人によって内容を変えたいときはこのかっこを使う。
   これに関して変更がある場合（{name},{email}以外を使うとき）は出力部分のプログラムを変更する必要がある。詳しくは後述。

'''

import smtplib
from email.mime.text import MIMEText
from email.header import Header
import pandas as pd
from google.colab import drive
import gspread
drive.mount('/content/drive')

def send_mail(gmail, password, mail, mailText, subject):
    charset = 'UTF-8'
    msg = MIMEText(mailText, 'plain', charset)
    msg['Subject'] = Header(subject.encode(charset), charset)
    smtp_obj = smtplib.SMTP('smtp.gmail.com', 587)
    smtp_obj.ehlo()
    smtp_obj.starttls()
    smtp_obj.login(gmail, password)
    smtp_obj.sendmail(gmail, mail, msg.as_string())
    smtp_obj.quit()

#スプシを読み込む
df = pd.read_excel(f)

'''

正しくスプシが読み込まれているか、本文は間違ってないか確認する。

スプシのカラム名（列名）が違うとうまく読み込めないことがある。
そのときはdata['']のシングルコーテーション内にほしいデータがあるカラム名を書く。
    data['（ここにカラム名を入れる）']

'''

df_fix=df.fillna(0)
for index, data in df_fix.iterrows():
  if data['名前'] == 0:
    continue

  mail=data['email']
  print(index+1)
  print(data['名前'])
  print(mail)
  print(mailText.format(name=data['名前'],email=data['email']))
  print("-------------------------------------")

"""メールの本文を変更したとき、次のセルのsend_mail関数の中の引数の一つである、mailText.format(name=data['名前'],email=data['email'])を変更しなければならない可能性がある。記述方法など詳しくは[ここ](https://www.javadrive.jp/python/string/index24.html#:~:text=Yamada%22%2C%2018%2C%20%22Tokyo%22-,%E7%BD%AE%E6%8F%9B%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AB%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B,-%E6%AC%A1%E3%81%AB%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92)を参照してください。  
.format（）の中を書き換えると本文(mailText)で新たに設定した{}に対応できる。
"""

'''

このセルを実行するとメールが送信されます。
慎重にどうぞ

スプシのカラム名（列名）が違うとうまく読み込めないことがある。
そのときはdata['']のシングルコーテーション内にほしいデータがあるカラム名を書く。
    data['（ここにカラム名を入れる）']

上で変更していてもここも直す必要がある。

'''

sendText = "{name}さん（{email}）にメールを送信しました"

df_fix=df.fillna(0)
for index, data in df_fix.iterrows():
  if data['名前'] == 0:
    continue

  mail=data['email']

  send_mail(gmail, password, mail, mailText.format(name=data['名前'],email=data['email']), subject)
  print(sendText.format(name=data['名前'],email=data['email']))